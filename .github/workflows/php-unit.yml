name: 'php-unit'

on:
  workflow_call:
    inputs:
      php_versions:
        description: PHP versions to use, string formatted as JSON array 
        required: true
        type: string
      bedita_version:
        description: BEdita version to use, bedita/bedita docker release 
        required: true
        type: string

jobs:

  unit:
    name: 'Run unit tests'
    if: "!contains(github.event.commits[0].message, '[skip ci]') && !contains(github.event.commits[0].message, '[ci skip]')"
    runs-on: 'ubuntu-latest'
    env:
      BEDITA_API_KEY: 12345
      BEDITA_API: http://127.0.0.1:8080
      BEDITA_ADMIN_USR: admin
      BEDITA_ADMIN_PWD: admin
      BEDITA_DOCKER_IMG: "bedita/bedita:${{ inputs.bedita_version }}"

    strategy:
      matrix:
        php-version: ${{ fromJSON(inputs.php_versions) }}

    steps:

      - name: 'Install gettext'
        run: 'sudo apt-get install -y gettext'

      - name: 'Checkout current revision'
        uses: 'actions/checkout@v2'

      - name: 'Composer config GH token if available'
        run: 'if [ -n "$GH_TOKEN" ]; then composer config github-oauth.github.com ${GH_TOKEN}; fi'

      - name: 'Docker pull bedita image'
        run: 'docker pull ${BEDITA_DOCKER_IMG}'

      - name: 'Docker inspect bedita image'
        run: 'docker inspect ${BEDITA_DOCKER_IMG}'

      - name: 'Docker run bedita image'
        run: 'docker run --name api -d -p 127.0.0.1:8080:80 --env BEDITA_API_KEY=${BEDITA_API_KEY} --env BEDITA_ADMIN_USR=${BEDITA_ADMIN_USR} --env BEDITA_ADMIN_PWD=${BEDITA_ADMIN_PWD} ${BEDITA_DOCKER_IMG}'

      - name: 'Wait for 10'
        run: 'sleep 10'

      - name: 'Docker ps - show all containers'
        run: 'docker ps -a'

      - name: 'Docker exec on api container: ls -la of webroot and webroot/_files'
        run: 'docker exec api ls -la . webroot webroot/_files'

      - name: 'Setup PHP'
        uses: 'shivammathur/setup-php@v2'
        with:
          php-version: '${{ matrix.php-version }}'
          tools: 'composer:v2'
          extensions: 'mbstring, intl, pdo_mysql.pdo'
          coverage: 'pcov'
          ini-values: 'pcov.directory=., pcov.exclude="~vendor~"'

      - name: 'Discover Composer cache directory'
        id: 'cachedir'
        run: echo "path=$(composer global config cache-dir)" >> $GITHUB_OUTPUT

      - name: 'Share Composer cache across runs'
        uses: 'actions/cache@v2'
        with:
          path: '${{ steps.cachedir.outputs.path }}'
          key: "composer-${{ matrix.php-version }}-${{ hashFiles('**/composer.json') }}"
          restore-keys: |
            composer-${{ matrix.php-version }}-
            composer-

      - name: 'Install dependencies with Composer'
        run: 'composer install --prefer-dist --no-interaction'

      - name: 'Dump Composer autoloader'
        run: 'composer dump-autoload --classmap-authoritative --no-cache'

      - name: 'Run PHPUnit with coverage'
        run: 'vendor/bin/phpunit --coverage-clover=clover.xml'

      - name: Check test coverage
        id: test-coverage
        uses: johanvanhelden/gha-clover-test-coverage-check@v1
        with:
          percentage: '85'
          filename: 'clover.xml'

      - name: 'Export coverage results'
        uses: 'codecov/codecov-action@v1'
        with:
          file: './clover.xml'
          env_vars: PHP_VERSION

      - name: 'Archive code coverage results'
        uses: 'actions/upload-artifact@v2'
        with:
          name: 'PHP ${{ matrix.php }}'
          path: 'clover.xml'
